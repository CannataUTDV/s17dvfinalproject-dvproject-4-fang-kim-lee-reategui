head(df)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard
df <- data.frame(fromJSON(getURL(URLencode('oraclerest.cs.utexas.edu:
5000/rest/native/?query="select * from
emp"
'),httpheader=c(DB='jdbc:data:world:sql:franny:Net Income',
USER='franny', PASS='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJhZ2VudDpmcmFubnk6OmZiZWUzMGFiLWQ4NmQtNDdlNS05YWQzLTllYzQ3NDU2NWJjZiIsImlhdCI6MTQ4NDY5NzMxNCwic3ViIjoicHJvZC11c2VyLWNsaWVudDpmcmFubnkiLCJyb2xlIjpbInVzZXJfYXBpX3dyaXRlIiwidXNlcl9hcGlfcmVhZCJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWV9.xlNtEcKeMzzdzLq6sPgjHeC-kEsDjRKGJiab3u7OWPpx1P0LKzhOPK_XhrHBjh01dthOL0tTLpKRd6V-LPWGoA', MODE='native_mode',
MODEL='model', returnDimensions = 'False', returnFor = 'JSON'),
verbose = TRUE), ))
summary(df)
head(df)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard
df <- data.frame(fromJSON(getURL(URLencode('oraclerest.cs.utexas.edu:
5000/rest/native/?query="select * from
emp"
'),httpheader=c(DB='jdbc:data:world:sql:franny:net-income',
USER='franny', PASS='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJhZ2VudDpmcmFubnk6OmZiZWUzMGFiLWQ4NmQtNDdlNS05YWQzLTllYzQ3NDU2NWJjZiIsImlhdCI6MTQ4NDY5NzMxNCwic3ViIjoicHJvZC11c2VyLWNsaWVudDpmcmFubnkiLCJyb2xlIjpbInVzZXJfYXBpX3dyaXRlIiwidXNlcl9hcGlfcmVhZCJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWV9.xlNtEcKeMzzdzLq6sPgjHeC-kEsDjRKGJiab3u7OWPpx1P0LKzhOPK_XhrHBjh01dthOL0tTLpKRd6V-LPWGoA', MODE='native_mode',
MODEL='model', returnDimensions = 'False', returnFor = 'JSON'),
verbose = TRUE), ))
summary(df)
head(df)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard
df <- data.frame(fromJSON(getURL(URLencode('oraclerest.cs.utexas.edu:
5000/rest/native/?query="select * from
emp"
'),httpheader=c(DB='jdbc:data:world:sql:franny:net-income',
USER='franny', PASS='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJhZ2VudDpmcmFubnk6OmZiZWUzMGFiLWQ4NmQtNDdlNS05YWQzLTllYzQ3NDU2NWJjZiIsImlhdCI6MTQ4NDY5NzMxNCwic3ViIjoicHJvZC11c2VyLWNsaWVudDpmcmFubnkiLCJyb2xlIjpbInVzZXJfYXBpX3dyaXRlIiwidXNlcl9hcGlfcmVhZCJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWV9.xlNtEcKeMzzdzLq6sPgjHeC-kEsDjRKGJiab3u7OWPpx1P0LKzhOPK_XhrHBjh01dthOL0tTLpKRd6V-LPWGoA', MODE='native_mode',
MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(df)
head(df)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard
df <- data.frame(fromJSON(getURL(URLencode('oraclerest.cs.utexas.edu:
5000/rest/native/?query="select * from
emp"
'),httpheader=c(DB='jdbc:data:world:sql:franny:net-income',
USER='franny', PASS='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJhZ2VudDpmcmFubnk6OmZiZWUzMGFiLWQ4NmQtNDdlNS05YWQzLTllYzQ3NDU2NWJjZiIsImlhdCI6MTQ4NDY5NzMxNCwic3ViIjoicHJvZC11c2VyLWNsaWVudDpmcmFubnkiLCJyb2xlIjpbInVzZXJfYXBpX3dyaXRlIiwidXNlcl9hcGlfcmVhZCJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWV9.xlNtEcKeMzzdzLq6sPgjHeC-kEsDjRKGJiab3u7OWPpx1P0LKzhOPK_XhrHBjh01dthOL0tTLpKRd6V-LPWGoA', MODE='native_mode',
MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(df)
head(df)
install.packages("dplyr")
install.packages("extrafont")
install.packages("ggplot2")
install.packages("ggthemes")
install.packages("gplots")
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard
df <- data.frame(fromJSON(getURL(URLencode('oraclerest.cs.utexas.edu:
5000/rest/native/?query="select * from
emp"
'),httpheader=c(DB='jdbc:data:world:sql:franny:net-income',
USER='franny', PASS='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJhZ2VudDpmcmFubnk6OmZiZWUzMGFiLWQ4NmQtNDdlNS05YWQzLTllYzQ3NDU2NWJjZiIsImlhdCI6MTQ4NDY5NzMxNCwic3ViIjoicHJvZC11c2VyLWNsaWVudDpmcmFubnkiLCJyb2xlIjpbInVzZXJfYXBpX3dyaXRlIiwidXNlcl9hcGlfcmVhZCJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWV9.xlNtEcKeMzzdzLq6sPgjHeC-kEsDjRKGJiab3u7OWPpx1P0LKzhOPK_XhrHBjh01dthOL0tTLpKRd6V-LPWGoA', MODE='native_mode',
MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(df)
head(df)
install.packages("lubridate")
install.packages("reshape2")
install.packages("tableplot")
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard
df <- data.frame(fromJSON(getURL(URLencode('oraclerest.cs.utexas.edu:5000/rest/native/?query="select * from
emp"'),
httpheader=c(DB='jdbc:data:world:sql:franny:net-income',USER='franny', PASS='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJhZ2VudDpmcmFubnk6OmZiZWUzMGFiLWQ4NmQtNDdlNS05YWQzLTllYzQ3NDU2NWJjZiIsImlhdCI6MTQ4NDY5NzMxNCwic3ViIjoicHJvZC11c2VyLWNsaWVudDpmcmFubnkiLCJyb2xlIjpbInVzZXJfYXBpX3dyaXRlIiwidXNlcl9hcGlfcmVhZCJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWV9.xlNtEcKeMzzdzLq6sPgjHeC-kEsDjRKGJiab3u7OWPpx1P0LKzhOPK_XhrHBjh01dthOL0tTLpKRd6V-LPWGoA', MODE='native_mode',
MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(df)
head(df)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard
df <- data.frame(fromJSON(getURL(URLencode('oraclerest.cs.utexas.edu:5000/rest/native/?query="select * from
emp"'),
httpheader=c(DB='jdbc:data:world:sql:franny:net-income',USER='franny', PASS='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJhZ2VudDpmcmFubnk6OmZiZWUzMGFiLWQ4NmQtNDdlNS05YWQzLTllYzQ3NDU2NWJjZiIsImlhdCI6MTQ4NDY5NzMxNCwic3ViIjoicHJvZC11c2VyLWNsaWVudDpmcmFubnkiLCJyb2xlIjpbInVzZXJfYXBpX3dyaXRlIiwidXNlcl9hcGlfcmVhZCJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWV9.xlNtEcKeMzzdzLq6sPgjHeC-kEsDjRKGJiab3u7OWPpx1P0LKzhOPK_XhrHBjh01dthOL0tTLpKRd6V-LPWGoA', MODE='native_mode',
MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(df)
head(df)
source('~/.active-rstudio-document')
df
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard
df <-data.frame(fromJSON(getURL(URLencode('oraclerest.cs.utexas.edu:5000/rest/native/?query="select * from
emp"'),httpheader=c(DB='jdbc:data:world:sql:franny:net-income',
USER='franny', PASS='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJhZ2VudDpmcmFubnk6OmZiZWUzMGFiLWQ4NmQtNDdlNS05YWQzLTllYzQ3NDU2NWJjZiIsImlhdCI6MTQ4NDY5NzMxNCwic3ViIjoicHJvZC11c2VyLWNsaWVudDpmcmFubnkiLCJyb2xlIjpbInVzZXJfYXBpX3dyaXRlIiwidXNlcl9hcGlfcmVhZCJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWV9.xlNtEcKeMzzdzLq6sPgjHeC-kEsDjRKGJiab3u7OWPpx1P0LKzhOPK_XhrHBjh01dthOL0tTLpKRd6V-LPWGoA', MODE='native_mode',
MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(df)
head(df)
summary(df)
head(df)
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your credentials. Get your password from Edit profile -> Settings -> Advanced -> Copy API Token to clipboard
df <- data.frame(fromJSON(getURL(URLencode('oraclerest.cs.utexas.edu:5000/rest/native/?query="select * from emp "'),httpheader=c(DB='jdbc:data:world:sql:franny:net-income', USER='franny', PASS='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJhZ2VudDpmcmFubnk6OmZiZWUzMGFiLWQ4NmQtNDdlNS05YWQzLTllYzQ3NDU2NWJjZiIsImlhdCI6MTQ4NDY5NzMxNCwic3ViIjoicHJvZC11c2VyLWNsaWVudDpmcmFubnkiLCJyb2xlIjpbInVzZXJfYXBpX3dyaXRlIiwidXNlcl9hcGlfcmVhZCJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWV9.xlNtEcKeMzzdzLq6sPgjHeC-kEsDjRKGJiab3u7OWPpx1P0LKzhOPK_XhrHBjh01dthOL0tTLpKRd6V-LPWGoA', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(df)
head(df)
require("jsonlite")
require("RCurl")
df <- data.frame(fromJSON(getURL(URLencode('oraclerest.cs.utexas.edu:5000/rest/native/?query="select * from emp "'),httpheader=c(DB='jdbc:data:world:sql:franny:net-income', USER='franny', PASS='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJhZ2VudDpmcmFubnk6OmZiZWUzMGFiLWQ4NmQtNDdlNS05YWQzLTllYzQ3NDU2NWJjZiIsImlhdCI6MTQ4NDY5NzMxNCwic3ViIjoicHJvZC11c2VyLWNsaWVudDpmcmFubnkiLCJyb2xlIjpbInVzZXJfYXBpX3dyaXRlIiwidXNlcl9hcGlfcmVhZCJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWV9.xlNtEcKeMzzdzLq6sPgjHeC-kEsDjRKGJiab3u7OWPpx1P0LKzhOPK_XhrHBjh01dthOL0tTLpKRd6V-LPWGoA', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
summary(df)
head(df)
site_path = R.home(component = "home")
fname = file.path(site_path, "etc", "Rprofile.site")
file.exists(fname)
file.exists("~/.Rprofile")
if(!file.exists("~/.Rprofile")) # only create if not already there
file.create("~/.Rprofile")    # (don't overwrite it)
file.edit("~/.Rprofile")
file.exists("~/.Rprofile")
site_path = R.home(component = "home")
site_path
source('~/DataVisualization/DrCannata/03 Tableau/Week 5 Tuesday Tableau.R')
source('~/DataVisualization/myDrCannata/03 Tableau/Week5_Tableau.R')
redacted <- "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmZyYW5ueSIsImlzcyI6ImFnZW50OmZyYW5ueTo6ZmJlZTMwYWItZDg2ZC00N2U1LTlhZDMtOWVjNDc0NTY1YmNmIiwiaWF0IjoxNDg0Njk3MzE0LCJyb2xlIjpbInVzZXJfYXBpX3dyaXRlIiwidXNlcl9hcGlfcmVhZCJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWV9.1R-lvtjIS-XANrKywv0NUCU_hVxd-e3Ti9levSfEZa1pPKhe08t61C_dLbhLb-BVQ_3wWa8618EHj6Y1IDQScA"
source('~/DataVisualization/myDrCannata/03 Tableau/Week5_Tableau.R')
source('~/DataVisualization/myDrCannata/03 Tableau/Week5_Tableau.R')
redacted <- 'eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJwcm9kLXVzZXItY2xpZW50OmZyYW5ueSIsImlzcyI6ImFnZW50OmZyYW5ueTo6ZmJlZTMwYWItZDg2ZC00N2U1LTlhZDMtOWVjNDc0NTY1YmNmIiwiaWF0IjoxNDg0Njk3MzE0LCJyb2xlIjpbInVzZXJfYXBpX3dyaXRlIiwidXNlcl9hcGlfcmVhZCJdLCJnZW5lcmFsLXB1cnBvc2UiOnRydWV9.1R-lvtjIS-XANrKywv0NUCU_hVxd-e3Ti9levSfEZa1pPKhe08t61C_dLbhLb-BVQ_3wWa8618EHj6Y1IDQScA'
source('~/DataVisualization/myDrCannata/03 Tableau/Week5_Tableau.R')
source('~/DataVisualization/myDrCannata/03 Tableau/Week5_Tableau.R')
df <-read.csv('C:/Users/Franny/Downloads/SuperStoreOrders.csv', stringsAsFactors = FALSE)
summary(df)
head(df)
# take df off if you are using dplyr to pipe the data into ggplot
p = dplyr::filter(df, Region == 'International' | Region == 'East') %>% ggplot() + geom_boxplot(aes(x=Category, y=Sales, colour=Region)) +
theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))
print(p)
p = dplyr::filter(df, Region == "International" | Region == "East") %>% ggplot(.) + geom_histogram(aes(x=Shipping_Cost)) +
theme(axis.text.x=element_text(angle=90, size=10, vjust=0.5))
print(p)
require(readr)
# Set the Working Directory to the 00 Doc folder
# Download the cannata/diamonds file into a folder ../../CSVs and rename the file PreETL_Diamonds.csv; .../ = goes up one folder
file_path = "../CSV/PreETL_Diamonds.csv"
diamonds <- readr::read_csv(file_path)
names(diamonds)
df <- rename(diamonds, tbl = table) # table is a reserved word in Oracle so rename it to tbl.
df <- diamonds
names(df)
str(df)
lapply('alphabet begins with abc', gsub, pattern="[a-c]",replacement= "")
lapply('alphabet begins with abc', gsub, pattern="[^abc]",replacement= "")
lapply('alphabet begins with abc', gsub, pattern="^[abc]",replacement= "")
lapply('alphabet begins with --- abc', gsub, pattern="[a-e]",replacement= "")
lapply('alphabet begins with --- abc', gsub, pattern="[ae-]",replacement= "")
lapply('alphabet begins with \\\ abc', gsub, pattern="[ae\\]",replacement= "")
lapply('alphabet begins with [] abc', gsub, pattern="[ae[]",replacement= "")
lapply('alphabet begins with [] abc', gsub, pattern="[ae]]",replacement= "")
lapply('alphabet begins with [] abc', gsub, pattern="[ae]]",replacement= "")
lapply('alphabet begins with [e] abc', gsub, pattern="[ae]]",replacement= "")
lapply('alphabet begins with [e] abc', gsub, pattern="[[ae]]",replacement= "")
lapply('alphabet begins with [e[] abc', gsub, pattern="[[ae]]",replacement= "") # it can't match nested bracket
lapply('alphabet begins with [e] abc', gsub, pattern="[[ae]]",replacement= "")
require(tidyr)
require(dplyr)
require(ggplot2)
tbl_df(diamonds)
View(diamonds)
dplyr::select(diamonds, cut, clarity) %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds;
diamonds %>% dplyr::select(cut, clarity) %>% tbl_df
names(diamonds)
diamonds %>% dplyr::select(color:price) %>% tbl_df # Equivalent SQL: none; all the columns between color and price
diamonds %>% dplyr::select(-cut, -clarity) %>% tbl_df # Equivalent SQL: none; all the columns except cut and clarity
x <- diamonds %>% dplyr::select(cut, clarity) %>% tbl_df # take output of the pipeline and put it into a new dataframe x
x
diamonds %>% dplyr::select(cut, clarity) %>% dplyr::filter(cut == "Good") %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds where cut = 'Good';
diamonds %>% dplyr::select(cut, clarity) %>% dplyr::filter(cut %in% c("Good", "Fair")) %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds where cut in ('Good', 'Fair');# or Equivalent SQL:  select cut, clarity from diamonds where cut = 'Good' or cut = 'Fair'; want cut to be either good or fair
diamonds %>% dplyr::select(cut, clarity) %>% dplyr::filter(cut %in% c("Good", "Fair"), clarity == "VS1") %>% tbl_df # Equivalent SQL:  select cut, clarity from diamonds where (cut = 'Good' or cut = 'Fair') and clarity = 'VS1';
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% dplyr::arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% dplyr::arrange(desc(x), y) %>% tbl_df
names(diamonds)
tbl_df
diamonds %>% dplyr::select(cut, clarity, x, y, z) %>% dplyr::filter(cut %in% c("Good", "Fair"), clarity == "VS1" | is.na(cut)) %>% dplyr::mutate(sum = x+y+z) %>% tbl_df # Equivalent: select cut, clarity, x, y, z, x+y+z as sum from diamonds where ((cut = 'Good' or cut = 'Fair') and clarity = 'VS1') or cut is null
pmin(1:5, 5:1) # Pairwise min
diamonds %>% dplyr::mutate(minxy = pmin(x,y)) %>% tbl_df
c(1,1,2,0,4,3,5) %>% cummin()
diamonds %>% dplyr::mutate(cummin_x = cummin(x)) %>% tbl_df
c(1,1,2,5,4,3,5) %>% cummax()
c(1,1,2,3,4,3,5) %>% cumsum()
diamonds %>% dplyr::arrange(x) %>% dplyr::mutate(cumsum_x = cumsum(x)) %>% ggplot(aes(x = x, y = cumsum_x)) + geom_point()
c(1,1,2,3,4,3,5) %>% cumprod()
c(1,1,2,3,4,3,5) %>% between(2,4)
diamonds %>% dplyr::mutate(between_x = between(x,4,4.1)) %>% tbl_df
()
dfsd
diamonds %>% dplyr::mutate(between_x = between(x,4,4.1)) %>% tbl_df
c(1:5) %>% cummean()
diamonds %>% dplyr::mutate(lead_z = lead(z)-z) %>% tbl_df
diamonds %>% dplyr::mutate(ntile_z = ntile(z,100)) %>% group_by(ntile_z) %>% dplyr::summarise(n=n()) %>% tbl_df
diamonds %>% dplyr::mutate(ntile_z = ntile(z,100)) %>% group_by(ntile_z) %>% dplyr::summarise(n=n()) %>% tbl_df #bin the vector into 100 bucketss
view(tbl_df)
View(tbl_df)
tbl_df
c(1,1,2,5,4,3,5) %>% cume_dist()
dd <- dplyr::sample_n(diamonds, 100) %>% dplyr::mutate(price_percent = cume_dist(price)) %>% dplyr::arrange(desc(price_percent)) %>% tbl_df # Equivalent SQL:
View(dd)
dd <- dplyr::sample_n(diamonds, 500) %>% dplyr::mutate(price_percent = cume_dist(price)) %>% dplyr::arrange(desc(price_percent)) %>% tbl_df # Equivalent SQL:
View(dd)
bottom20_diamonds <- diamonds %>% dplyr::mutate(price_percent = cume_dist(price)) %>% dplyr::filter(price_percent <= .20) %>% dplyr::arrange(desc(price_percent)) %>% tbl_df
View(bottom20_diamonds)
ds <- diamonds %>% summarize(max_price = max(price)) # Equivalent SQL select max(price) as max_price from diamonds;
View(df)
View(ds)
d <- diamonds %>% group_by(cut) %>% dplyr::summarise(n = n()) %>% dplyr::arrange(n) %>% View # Equivalent SQL: select cut, color, count(*) n from diamonds group by cut, color order by n; count the number of records
lapply('alphabet begins with abc', gsub, pattern="ab?c",replacement= "")
lapply('alphabet begins with ac', gsub, pattern="ab?c",replacement= "")
lapply('alphabet begins with abc', gsub, pattern="ab?c",replacement= "")
lapply('alphabet begins with abc abc', gsub, pattern="ab?c",replacement= "")
lapply('alphabet begins with abc ac', gsub, pattern="ab?c",replacement= "")
lapply('alphabet begins with abc aec', gsub, pattern="ab?c",replacement= "")
lapply('alphabet begins with abc ac', gsub, pattern="ab?c",replacement= "")
lapply('alphabet begins with abc abcc', gsub, pattern="ab?c",replacement= "")
lapply('alphabet begins with abc abbcc', gsub, pattern="ab?c",replacement= "")
lapply('alphabet begins with aabc', gsub, pattern="a*bc",replacement= "")
lapply('alphabet begins with aabc bc', gsub, pattern="a*bc",replacement= "")
lapply('alphabet begins with bc', gsub, pattern="a*bc",replacement= "")
lapply('alphabet begins with bc', gsub, pattern="a+bc",replacement= "")
lapply('alphabet begins with aabc', gsub, pattern="a+.c",replacement= "")
lapply('alphabet begins with aabc ac', gsub, pattern="a+.c",replacement= "")
lapply('alphabet begins with aabc aic', gsub, pattern="a+.c",replacement= "")
lapply('alphabet begins with aabc', gsub, pattern=".*",replacement= "")
lapply('alphabet begins with aabc', gsub, pattern=".",replacement= "")
lapply('alphabet begins with abc', gsub, pattern="^[be]",replacement= "")
lapply('alphabet begins with abc', gsub, pattern="^[a]",replacement= "")
lapply('alphabet begins with abc', gsub, pattern="^[aaa]",replacement= "")
lapply('balphabet begins with abc', gsub, pattern="^[abc]",replacement= "")
lapply('alphabet begins with abc', gsub, pattern="^[abc]",replacement= "")
lapply('alphabet begins with \\\ abc', gsub, pattern="[ae\]",replacement= "")
lapply('alphabet begins with \\\ abc', gsub, pattern="[ae\\]",replacement= "")
lapply('alphabet begins with \\\ abc', gsub, pattern="[ae\\i]",replacement= "")
lapply('alphabet begins with \\\ abc', gsub, pattern="[ae\i]",replacement= "")
lapply('alphabet begins with \\\ abc', gsub, pattern="[ae\i\]",replacement= "")
lapply('alphabet begins with \\\ abc', gsub, pattern="[ae\\n]",replacement= "")
lapply('alphabet begins with \\\ abc', gsub, pattern="[ae\\\]",replacement= "")
lapply('alphabet begins with \\\ abc', gsub, pattern="[ae\\\\]",replacement= "")
lapply('alphabet begins with \\\ abc', gsub, pattern="[ae\\]",replacement= "")
lapply('alphabet begins with [] abc', gsub, pattern="[ae[]",replacement= "")
lapply('alphabet begins with [] abc', gsub, pattern="[ae]]",replacement= "")
lapply('alphabet begins with [e] [aabc', gsub, pattern="[[ae]]",replacement= "")
lapply('alphabet begins with abbc', gsub, pattern="ab?c",replacement= "")
lapply('alphabet begins with abc', gsub, pattern="ab?c",replacement= "")
lapply('alphabet begins with aaabc', gsub, pattern="(beg).*(abc)",replacement= "\\11234")
grep("+", tmp$cut, perl=TRUE, value=FALSE) %>% tmp[., c('carat', 'cut', 'color')] %>% tbl_df
grep("y+", tmp$cut, perl=TRUE, value=FALSE) %>% tmp[., c('carat', 'cut', 'color')] %>% tbl_df
grep("very+", tmp$cut, perl=TRUE, value=FALSE) %>% tmp[., c('carat', 'cut', 'color')] %>% tbl_df
grep("very+ ", tmp$cut, perl=TRUE, value=FALSE) %>% tmp[., c('carat', 'cut', 'color')] %>% tbl_df
tmp <- head(diamonds, 20)
tmp
grep("very+ ", tmp$cut, perl=TRUE, value=FALSE) %>% tmp[., c('carat', 'cut', 'color')] %>% tbl_df
grep(" + ", tmp$cut, perl=TRUE, value=FALSE) %>% tmp[., c('carat', 'cut', 'color')] %>% tbl_df
grep(" +", tmp$cut, perl=TRUE, value=FALSE) %>% tmp[., c('carat', 'cut', 'color')] %>% tbl_df
grep("+ ", tmp$cut, perl=TRUE, value=FALSE) %>% tmp[., c('carat', 'cut', 'color')] %>% tbl_df
grep("very", tmp$cut, perl=TRUE, value=FALSE) %>% tmp[., c('carat', 'cut', 'color')] %>% tbl_df
grep("Very", tmp$cut, perl=TRUE, value=FALSE) %>% tmp[., c('carat', 'cut', 'color')] %>% tbl_df
grep("^G+", tmp$cut, perl=TRUE, value=FALSE) %>% tmp[., c('carat', 'cut', 'color')] %>% tbl_df
grep("^G", tmp$cut, perl=TRUE, value=FALSE) %>% tmp[., c('carat', 'cut', 'color')] %>% tbl_df
diamonds %>% group_by(cut,color)
diamonds %>% group_by(cut, color, clarity)
diamonds %>% group_by(cut, color, clarity) %>% dplyr::summarise(mean_carat = mean(carat)) %>% ggplot(aes(x=cut, y=mean_carat, color=color)) + geom_point() + facet_wrap(~clarity)
diamonds %>% group_by(cut, color, clarity) %>% dplyr::summarise(mean_carat = mean(carat))
require(tidyr)
diamonds$ID<-seq.int(nrow(diamonds)) #nrow
seq.int(8)
diamonds$ID<-seq.int(nrow(diamonds)) #nrow: how many rows in that dataframe; seq.int(n): get a sequence of n numbers starting at 1
View(diamonds)
head(diamonds)
head(diamonds) %>% dplyr::select(ID, cut, color) %>% tidyr::gather(variable, value, -ID) %>% tbl_df
diamonds %>% dplyr::select(ID, x, y, z, cut)
diamonds %>% dplyr::select(ID, x, y, z, cut) %>% tidyr::gather(variable, value, -ID, -cut)
View(diamonds)
diamonds %>% dplyr::select(ID, x, y, z, cut)
diamonds %>% dplyr::select(ID, x, y, z, cut) %>% tidyr::gather(variable, value, -ID, -cut) %>% ggplot()
View(diamonds)
diamonds %>% dplyr::select(ID, x, y, z, cut) %>% tidyr::gather(variable, value, -ID, -cut) %>% ggplot() +
# facet_grid(~cut) +
# ylim(0, 10) +
geom_point(aes(x=ID, y=value, colour=variable))
diamonds %>% dplyr::select(ID, x, y, z, cut) %>% tidyr::gather(variable, value, -ID, -cut) %>% ggplot() +
facet_grid(~cut) +
# ylim(0, 10) +
geom_point(aes(x=ID, y=value, colour=variable))
#ui.R
require(shiny)
require(DT)
navbarPage(
title = "Elements of Data Visualization",
tabPanel(title = "Diamonds Data",
sidebarPanel(
actionButton(inputId = "CLICKS1",  label = "Click me")
),
mainPanel(dataTableOutput("TABLE")
)
)
)
# server.R
require("jsonlite")
require("RCurl")
require(ggplot2)
require(dplyr)
require(shiny)
require(shinydashboard)
require(leaflet)
require(DT)
shinyServer(function(input, output) {
df1 <- eventReactive(input$CLICKS1, {data.frame(fromJSON(getURL(URLencode(gsub("\n", " ", 'localhost:5011/rest/native/?query=
"select *
from diamonds
where cut = \'Fair\' or cut = \'Premium\';"
')), httpheader=c(DB='jdbc:oracle:thin:@aevum.cs.utexas.edu:1521/f16pdb', USER='cs329e_UTEid', PASS='orcl_uteid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
})
# Begin code for First Tab:
output$TABLE <- renderDataTable({DT::datatable(df1(), rownames = TRUE, extensions = list(Responsive = TRUE, FixedHeader = TRUE)
)
})
})
install.packages("shiny")
library(shiny); runApp('DataVisualization/myDrCannata/07 Shiny/01 Shiny Video Part 2/code/03-reactive.R')
runApp('DataVisualization/myDrCannata/07 Shiny/01 Shiny Video Part 2/code/02-two-outputs.R')
runApp('DataVisualization/myDrCannata/07 Shiny/01 Shiny Video Part 2/code/05-actionButton.R')
runApp('DataVisualization/myDrCannata/07 Shiny/01 Shiny Video Part 2/code/01-two-inputs.R')
runApp('DataVisualization/myDrCannata/07 Shiny/01 Shiny Video Part 2/code/02-two-outputs.R')
runApp('DataVisualization/myDrCannata/07 Shiny/01 Shiny Video Part 2/code/06-observeEvent.R')
runApp('DataVisualization/myDrCannata/07 Shiny/01 Shiny Video Part 2/code/08-reactiveValues.R')
install.packages("packrat")
install.packages("rsconnect")
# call in data from data.world
df <- data.frame(fromJSON(getURL(URLencode(gsub("\n", " ",'oraclerest.cs.utexas.edu:5000/rest/native/?query="select * from pantheria"')),httpheader=c(DB='jdbc:data:world:sql:jlee:s-17-edv-project-2', USER='jlee', PASS=redacted , MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE) ))
#df <- read.csv("https://query.data.world/s/e87oaimd6h5idzo35twdrkxap",header=T);
# display summary, head, and subset of the dataframe
print(head(summary(df)))
print(head(df))
print(subset(df))
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% dplyr::arrange(desc(x)) %>% tbl_df
data.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% dplyr::arrange(desc(x), y) %>% tbl_df
diamonds %>% dplyr::mutate(minxy = pmin(x,y)) %>% tbl_df #the minimum of x and y
c(1,1,2,3,4,3,5) %>% between(2,4)
Windowing functions
diamonds %>% dplyr::mutate(between_x = between(x,4,4.1)) %>% tbl_df # return true if x is between 4 and 4.1, false otherwise
c(1:5) %>% cummean()
diamonds %>% dplyr::mutate(lead_z = lead(z)-z) %>% tbl_df #takes the value in the next row and subtract out the current z value; do on time-series data and give you ex. km/s
c(1:10) %>% ntile(4) # bucket edges are rounded
c(1,1,2,5,4,3,5) %>% cume_dist()
c(1:5) %>% cume_dist()
ds <- diamonds %>% summarize(max_price = max(price)) # Equivalent SQL select max(price) as max_price from diamonds; find the maximm price in the entire dataframe
diamonds %>% summarize(mean = mean(x), sum = sum(x,y,z), n = n()) # Equivalent SQL: select avg(x) as avg, sum(x)+sum(y)+sum(z) as sum, count(*) as n from diamonds;
d <- diamonds %>% group_by(cut) %>% dplyr::summarise(n = n()) %>% dplyr::arrange(n) %>% View # Equivalent SQL: select cut, color, count(*) n from diamonds group by cut, color order by n; count the number of records
diamonds %>% group_by(cut, color, clarity) %>% dplyr::summarise(mean_carat = mean(carat)) %>% ggplot(aes(x=cut, y=mean_carat, color=color)) + geom_point() + facet_wrap(~clarity) #legend comes from the data in the column
head(diamonds) %>% dplyr::select(ID, cut, color) %>% tidyr::gather(variable, value, -ID) %>% tbl_df
diamonds %>% dplyr::select(ID, x, y, z, cut) %>% tidyr::gather(variable, value, -ID, -cut) %>% ggplot() +
# facet_grid(~cut) +
# ylim(0, 10) +
geom_point(aes(x=ID, y=value, colour=variable))
head(diamonds) %>% dplyr::select(ID, cut, color) %>% tidyr::gather(variable, value, -ID) %>% tbl_df
c(1,1,2,3,4,3,5) %>% cumprod()
diamonds %>% group_by(cut,color) %>% dplyr::summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% View
d <- diamonds %>% group_by(cut) %>% dplyr::summarise(n = n()) %>% dplyr::arrange(n) %>% View # Equivalent SQL: select cut, color, count(*) n from diamonds group by cut, color order by n; count the number of records
library(shiny); runApp('DataVisualization/myDrCannata/07 Shiny/02 Shiny Video Part 3/code/02-tags.R')
runApp('DataVisualization/myDrCannata/07 Shiny/02 Shiny Video Part 3/code/03-layout.R')
runApp('DataVisualization/myDrCannata/07 Shiny/02 Shiny Video Part 3/code/05-tabs.R')
lapply('alphabet begins with abc', gsub, pattern="[^abc]",replacement= "")
x=1:5
y=2*x
z=c('a', 'b', 'c', 'd', 'e')
df=data.frame(x,y, z)
print(df)
shiny::runApp('DataVisualization/myDrCannata/08 Shiny Actions')
runApp('DataVisualization/myDrCannata/08 Shiny Actions')
runApp('DataVisualization/myDrCannata/08 Shiny Actions')
runApp('DataVisualization/myDrCannata/08 Shiny Actions')
devtools::install_github("datadotworld/data.world-r", build_vignettes = TRUE, force = TRUE)
install.packages("devtools")
devtools::install_github("datadotworld/data.world-r", build_vignettes = TRUE, force = TRUE)
remotes::install_github("datadotworld/data.world-r")
install.packages("remotes")
library(remotes)
remotes::install_github("datadotworld/data.world-r")
install.packages("remotes")
library(remotes)
remotes::install_github("datadotworld/data.world-r")
D:\
D:\Program Files (x86)
./R CMD INSTALL -l "D:\Program Files (x86)\R-3.2.3\library C:\Users\Franny\AppData\Local\Temp\Rtmpm2TJnF\devtools262c12b22d1d\datadotworld-data.world-r-81a6488"
R CMD INSTALL -l "D:\Program Files (x86)\R-3.2.3\library C:\Users\Franny\AppData\Local\Temp\Rtmpm2TJnF\devtools262c12b22d1d\datadotworld-data.world-r-81a6488"
devtools::install_github("datadotworld/data.world-r", build_vignettes = TRUE, force = TRUE)
source('~/.active-rstudio-document')
require(data.world)
conn <- data.world()
result <- query(conn, dataset="cannata/diamonds", type = "sql",query="select color,clarity from diamonds")
View(result)
require(data.world)
conn <- data.world(propsfile = "C:/Users/Franny/.data.world")
result <- query(conn, dataset="cannata/diamonds", type = "sql",query="select color,clarity from diamonds")
View(result)
require(data.world)
conn <- data.world(propsfile = "C:/Users/Franny/.data.world")
result <- query(conn, dataset="cannata/diamonds", type = "sql",query="select color,clarity from diamonds")
View(result)
import(data.world)
conn <- data.world()
result <- query(conn, dataset="cannata/diamonds", type="sql",
query="
select color, clarity,
sum(price) as sum_price,
sum(carat) as sum_carat,
sum(price) / sum(carat) as ratio,
case
when sum(price) / sum(carat) < ? then '03 Low'
when sum(price) / sum(carat) < ? then '02 Medium'
else '01 High'
end AS kpi
from diamonds
group by color, clarity
order by clarity
"
,queryParameters = list(3000, 5000)
)
View(result)
import(data.world)
conn <- data.world(propsfile = "C:/Users/Franny/.data.world")
result <- query(conn, dataset="cannata/diamonds", type="sql",
query="
select color, clarity,
sum(price) as sum_price,
sum(carat) as sum_carat,
sum(price) / sum(carat) as ratio,
case
when sum(price) / sum(carat) < ? then '03 Low'
when sum(price) / sum(carat) < ? then '02 Medium'
else '01 High'
end AS kpi
from diamonds
group by color, clarity
order by clarity
"
,queryParameters = list(3000, 5000)
)
View(result)
import(data.world)
conn <- data.world(propsfile = "C:/Users/Franny/.data.world")
result <- query(conn, dataset="cannata/diamonds", type="sql",
query="
select color, clarity,
sum(price) as sum_price,
sum(carat) as sum_carat,
sum(price) / sum(carat) as ratio,
case
when sum(price) / sum(carat) < ? then '03 Low'
when sum(price) / sum(carat) < ? then '02 Medium'
else '01 High'
end AS kpi
from diamonds
group by color, clarity
order by clarity
"
,queryParameters = list(3000, 5000)
)
View(result)
import(data.world)
require(data.world)
conn <- data.world(propsfile = "C:/Users/Franny/.data.world")
result <- query(conn, dataset="cannata/diamonds", type = "sql",query="select color,clarity from diamonds")
View(result)
install.packages("tibble")
require(data.world)
conn <- data.world(propsfile = "C:/Users/Franny/.data.world")
result <- query(conn, dataset="cannata/diamonds", type = "sql",query="select color,clarity from diamonds")
View(result)
shiny::runApp('DV_Project5/02 Shiny')
install(ggplot2)
require(dplyr)
require(shiny)
require(shinydashboard)
require(data.world)
require(readr)
require(DT)
install.packages("ggplot2")
install.packages("dplyr")
install.packages("shinydashboard")
install.packages("readr")
install.packages("DT")
shiny::runApp('DV_Project5/02 Shiny')
shiny::runApp('DV_Project6/02 Shiny/Barchart2')
runApp('DataVisualization/DrCannata/09TableauExamples')
runApp('DV_Project6/02 Shiny/Barchart2')
runApp('DataVisualization/DrCannata/09TableauExamples')
shiny::runApp('DV_Project6/02 Shiny/Barchart1')
shiny::runApp('DV_ProjectFinal/02 Shiny/01 boxplot 02 histogram 03 scatterplot')
runApp('DV_ProjectFinal/02 Shiny/01 boxplot 02 histogram 03 scatterplot')
shiny::runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 03 barchart')
runApp('DV_ProjectFinal/02 Shiny/Shiny 02')
runApp('DV_ProjectFinal/02 Shiny/Shiny 02')
runApp('DV_ProjectFinal/02 Shiny/Shiny 02')
runApp('DV_ProjectFinal/02 Shiny/01 boxplot 02 histogram 03 scatterplot')
